流程控制語句：for、if、else 和 switch
學習如何用條件、循環和開關語句控制原始碼的流程。

Go作者組
http://golang.org

* for

Go只有一種循環結構： `for` 循環。

基本的 `for` 循環除了沒有 `(`)` 之外（甚至強制不能使用它們），看起來跟 C 或者 Java 中做的一樣，而 `{`}` 是必須的。

.play prog/tour/for.go

* for（續）
        
跟 C 或者 Java 中一樣，可以讓前置、後置語句為空。

.play prog/tour/for-continued.go

* for是Go的「while」
        
基於此可以省略分號：C 的 `while` 在 Go 中叫做 `for` 。

.play prog/tour/for-is-gos-while.go

* 無窮迴圈

如果省略了循環條件，循環就不會結束，因此可以用更簡潔地形式表達無窮迴圈。

.play prog/tour/forever.go

* if

`if` 語句除了沒有 `(`)` 之外（甚至強制不能使用它們），看起來跟 C 或者 Java 中的一樣，而 `{`}` 是必須的。
        
（耳熟嗎？）

.play prog/tour/if.go

* if 的便捷語句

跟 `for` 一樣， `if` 語句可以在條件之前執行一個簡單的語句。

由這個語句定義的變數的作用域僅在 `if` 範圍之內。

（在最後的 `return` 語句處使用 `v` 看看。）

.play prog/tour/if-with-a-short-statement.go

* if 和 else

在 `if` 的便捷語句定義的變數同樣可以在任何對應的 `else` 塊中使用。

.play prog/tour/if-and-else.go

* 練習：循環和函式

作為練習函式和循環的簡單途徑，用牛頓法實現開方函式。

在這個例子中，牛頓法是通過選擇一個初始點 _z_ 然後重複這一過程求 `Sqrt(x)` 的近似值：

.image /content/img/newton.png

為了做到這個，只需要重複計算 10 次，並且觀察不同的值（1，2，3，……）是如何逐步逼近結果的。
   然後，修改循環條件，使得當值停止改變（或改變非常小）的時候退出循環。觀察迭代次數是否變化。結果與 [[http://golang.org/pkg/math/#Sqrt][math.Sqrt]] 接近嗎？

提示：定義並初始化一個浮點值，向其提供一個浮點語法或使用轉換：

    z := float64(1)
    z := 1.0

.play prog/tour/exercise-loops-and-functions.go

* switch

你大概已知道 `switch` 的樣子了。

除非以 `fallthrough` 語句結束，否則分支會自動終止。

.play prog/tour/switch.go

* switch 的執行順序

switch 的條件從上到下的執行，當匹配成功的時候停止。

（例如，

	switch i {
	case 0:
	case f():
	}

當 `i==0` 時不會調用 `f` 。）

#appengine: *注意：* Go playground 中的時間總是從 2009-11-10 23:00:00 UTC 開始，
#appengine: 如何校驗這個值作為一個練習留給讀者完成。

.play prog/tour/switch-evaluation-order.go

* 沒有條件的 switch

沒有條件的 switch 同 `switch`true` 一樣。

這一構造使得可以用更清晰的形式來編寫長的 if-then-else 鏈。

.play prog/tour/switch-with-no-condition.go

* 恭喜！

你已經完成了本課程！

你可以返回[[javascript:highlightAndClick(".logo")][A Tour of Go]]列表看看接下來學習什麼，或者繼續[[javascript:click('.next-page')][下個課程]]。