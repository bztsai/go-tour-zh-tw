複雜類型： struct、slice 和 map。
學習如何基於已有類型定義新的類型：本課涵蓋了結構體、陣列和 map。

Go 作者組
http://golang.org

* 結構體

一個結構體（ `struct` ）就是一個字段的集合。

（而 `type` 的含義跟其字面意思相符。）

.play prog/tour/structs.go

* 結構體字段

結構體字段使用點號來訪問。

.play prog/tour/struct-fields.go

* 指針

Go有指針，但是沒有指針運算。

結構體字段可以通過結構體指針來訪問。通過指針間接的訪問是透明的。

.play prog/tour/pointers.go

* 結構體文法

結構體文法表示通過結構體字段的值作為列表來新分配一個結構體。

使用 `Name:` 語法可以僅列出部分字段。（字段名的順序無關。）

特殊的前綴 `&` 構造了指向結構體的指針。

.play prog/tour/struct-literals.go

* new 函式

表達式 `new(T)` 分配了一個零初始化的 `T` 值，並返回指向它的指針。

    var t *T = new(T)

或

	t := new(T)

.play prog/tour/the-new-function.go

* 陣列

類型 `[n]T` 是一個有 `n` 個類型為 `T` 的值的陣列。

表達式

	var a [10]int

定義變數 `a` 是一個有十個整數的陣列。

陣列的長度是其類型的一部分，因此陣列不能改變大小。
這看起來是一個制約，但是請不要擔心；Go 提供了更加便利的方式來使用陣列。

.play prog/tour/array.go

* slice
        
一個 slice 會指向一個陣列，並且包含了長度信息。

`[]T` 是一個元素類型為 `T` 的 slice。

.play prog/tour/slices.go

* 對 slice 切片

slice 可以重新切片，創建一個新的 slice 值指向相同的陣列。

表達式

    s[lo:hi]
        
表示從 `lo` 到 `hi-1` 的 slice 元素，含兩端。因此

    s[lo:lo]

是空的，而

    s[lo:lo+1]

有一個元素。

.play prog/tour/slicing-slices.go

* 構造 slice

slice 由函式 `make` 創建。這會分配一個零長度的陣列並且返回一個 slice 指向這個陣列：

    a := make([]int, 5)  // len(a)=5

為了指定容量，可傳遞第三個參數到 `make` ：

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play prog/tour/making-slices.go

* 空 slice

slice 的零值是 `nil` 。

一個 nil 的 slice 的長度和容量是 0。

（了解更多關於 slice 的內容，參閱文章[[http://golang.org/doc/articles/slices_usage_and_internals.html][slice：使用和內幕]]。）

.play prog/tour/nil-slices.go

* range

`for` 循環的 `range` 格式可以對 slice 或者 map 進行迭代循環。

.play prog/tour/range.go

* range（續）

可以將值賦值給 `_` 來忽略序號和值。

如果只需要索引值，去掉「, value」的部分即可。

.play prog/tour/range-continued.go

* 練習：slice

實現 `Pic` 。它返回一個 slice 的長度 `dy` ，和 slice 中每個元素的長度的 8 位無符號整數 `dx` 。當執行這個程序，它會將整數轉換為灰度（好吧，藍度）圖片進行展示。

圖片的實現已經完成。可能用到的函式包括 `>x^y` ， `(x+y)/2` 和 `x*y` 。

（需要使用循環來分配 `[][]uint8` 中的每個 `[]uint8`。）

（使用 `uint8(intValue)` 在類型之間進行轉換。）

.play prog/tour/exercise-slices.go

* map

map 映射鍵到值。

map 在使用之前必須用 `make` 而不是 `new` 來創建；值為 `nil` 的 map 是空的，並且不能賦值。

.play prog/tour/maps.go

* map 的文法

map 的文法跟結構體文法相似，不過必須有鍵名。

.play prog/tour/map-literals.go

* map 的文法（續）

如果頂級的類型只有類型名的話，可以在文法的元素中省略鍵名。

.play prog/tour/map-literals-continued.go

* 修改 map

在 map `m` 中插入或修改一個元素：

	m[key] = elem

獲得元素：

    elem = m[key]

刪除元素：

	delete(m, key)

通過雙賦值檢測某個鍵存在：

    elem, ok = m[key]

如果 `key` 在 `m` 中， `ok` 為 `true`。否則，`ok` 為 `false` ，並且 `elem` 是 map 的元素類型的零值。

同樣的，當從 map 中讀取某個不存在的鍵時，結果是 map 的元素類型的零值。

.play prog/tour/mutating-maps.go

* 練習：map

實現 `WordCount` 。它應當返回一個含有 `s` 中每個「詞」個數的 map。函式 `wc.Test` 針對這個函式執行一個測試用例，並顯示成功或者失敗。

你會發現 [[http://golang.org/pkg/strings/#Fields][strings.Fields]] 很有幫助。

.play prog/tour/exercise-maps.go

* 函式為值

函式也是值。

.play prog/tour/function-values.go

* 函式的閉包

Go 函式可以是閉包的。閉包是一個函式值，它來自函式體的外部的變數引用。函式可以對這個引用值進行訪問和賦值；換句話說這個函式被「綁定」在這個變數上。

例如，函式 `adder` 返回一個閉包。每個閉包都被綁定到其各自的 `sum` 變數上。

.play prog/tour/function-closures.go

* 練習：斐波納契閉包

現在來通過函式做些有趣的事情。

實現一個 `fibonacci` 函式，返回一個函式（一個閉包）可以返回連續的斐波納契數。

.play prog/tour/exercise-fibonacci-closure.go


* 進階練習：複數的立方跟

讓我們通過 `complex64` 和 `complex128` 來探索一下 Go 內建的複數。對於立方根，牛頓法需要大量循環：

.image /content/img/newton3.png

找到 2 的立方根，確保算法能夠工作。在 `math/cmplx` 包中有 [[http://golang.org/pkg/math/cmplx/#Pow][Pow]] 函式。

.play prog/tour/advanced-exercise-complex-cube-roots.go

* 恭喜！

你已經完成了本課程！

你可以返回[[javascript:highlightAndClick(".logo")][A Tour of Go]]列表看看接下來學習什麼，或者繼續[[javascript:click('.next-page')][下個課程]]。