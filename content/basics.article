包、變數和函式。
學習 Go 程式的基本組件。

Go 作者組
http://golang.org

* Packages

每個 Go 程式都是由包組成的。

程式運行的入口是包 `main` 。

這個程式使用並導入了包 `"fmt"` 和 `"math/rand"` 。

按照慣例，包名與導入路徑的最後一個目錄一致。例如， `"math/rand"` 包由 `package`rand` 語句開始。

#appengine: *注意：* 這個程式的運行環境是固定的，因此
#appengine: `rand.Intn` 總是會返回相同的數字。
#appengine:
#appengine: （為了得到不同的數字，需要生成不同的種子數，參閱 [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]]。）

.play prog/tour/packages.go

* 導入

這個原始碼用圓括號組合了導入，這是「factored」導入語句。同樣可以編寫多個導入語句，例如：

    import "fmt"
    import "math"

.play prog/tour/imports.go

* 導出名

在導入了一個包之後，就可以用其導出的名稱來調用它。

在 Go 中，首字母大寫的名稱是被導出的。

`Foo` 和 `FOO` 都是被導出的名稱。名稱 `foo` 是不會被導出的。

執行原始碼。然後將 `math.pi` 改名為 `math.Pi` 再試著執行一下。

.play prog/tour/exported-names.go

* 函式

函式可以沒有參數或接受多個參數。
        
在這個例子中， `add` 接受兩個 `int` 類型的參數。
    
注意類型在變數名 _之後_ 。

（參考 [[http://golang.org/doc/articles/gos_declaration_syntax.html][這篇關於 Go 語法定義的文章]]了解類型以這種形式出現的原因。）

.play prog/tour/functions.go

* 函式（續）
        
當兩個或多個連續的函式命名參數是同一類型，則除了最後一個類型之外，其他都可以省略。
        
在這個例子中 ，

    x int, y int

被縮寫為

    x, y int

.play prog/tour/functions-continued.go

* 多值返回

函式可以返回任意數量的返回值。

這個函式返回了兩個字符串。

.play prog/tour/multiple-results.go

* 命名返回值

函式接受參數。在 Go 中，函式可以返回多個「結果參數」，而不僅僅是一個值。它們可以像變數那樣命名和使用。

如果命名了返回值參數，一個沒有參數的 `return` 語句，會將當前的值作為返回值返回。

.play prog/tour/named-results.go

* 變數
        
`var` 語句定義了一個變數的列表；跟函式的參數列表一樣，類型在後面。

.play prog/tour/variables.go

* 初始化變數

變數定義可以包含初始值，每個變數對應一個。

如果初始化是使用表達式，則可以省略類型；變數從初始值中獲得類型。

.play prog/tour/variables-with-initializers.go

* 短聲明變數

在函式中， `:=` 簡潔賦值語句在明確類型的地方，可以用於替代 `var` 定義。

函式外的每個語法塊都必須以關鍵字開始（ `var` 、 `func` 、等等）， `:=` 結構不能使用在函式外。

.play prog/tour/short-variable-declarations.go

* 基本類型

Go的基本類型有basic types

    bool

    string

    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr

    byte // uint8 的別名

    rune // int32 的別名
         // 代表一個Unicode碼

    float32 float64

    complex64 complex128

.play prog/tour/basic-types.go

* 類型轉換

表達式 `T(v)` 將值 `v` 轉換為類型 `T` 。

一些關於數值的轉換：

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

或者，更加簡單的形式：

	i := 42
	f := float64(i)
	u := uint(f)

與 C 不同的是 Go 的在不同類型之間的項目賦值時需要顯式轉換。
試著移除例子中 `float64` 或 `int` 的轉換看看會發生什麼。

.play prog/tour/type-conversions.go

* 常數

常數的定義與變數類似，只不過使用 `const` 關鍵字。

常數可以是字符、字符串、布爾或數字類型的值。

常數不能使用 `:=` 語法定義。

.play prog/tour/constants.go

* 數值常數

數值常數是高精度的 _值_ 。

一個未指定類型的常數由上下文來決定其類型。

也嘗試一下輸出 `needInt(Big)` 吧。

.play prog/tour/numeric-constants.go

* 恭喜！

你已經完成了本課程！

你可以返回[[javascript:highlightAndClick(".logo")][A Tour of Go]]列表看看接下來學習什麼，或者繼續[[javascript:click('.next-page')][下個課程]]。